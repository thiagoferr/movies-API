generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model country {
  country_id         Int                  @id @default(autoincrement()) 
  country_iso_code   String?              @db.VarChar(10)
  country_name       String?              @db.VarChar(200)
  production_country production_country[] 
}

model department {
  department_id   Int          @id @default(autoincrement())
  department_name String?      @db.VarChar(200)
  movie_crew      movie_crew[] 
}

model gender {
  gender_id  Int          @id @default(autoincrement())
  gender     String?      @db.VarChar(20)
  movie_cast movie_cast[] 
}

model genre {
  genre_id     Int            @id @default(autoincrement())
  genre_name   String?        @db.VarChar(100)
  movie_genres movie_genres[] 
}

model keyword {
  keyword_id     Int              @id @default(autoincrement())
  keyword_name   String?          @db.VarChar(100)
  movie_keywords movie_keywords[] 
}

model language {
  language_id     Int               @id @default(autoincrement())
  language_code   String?           @db.VarChar(10)
  language_name   String?           @db.VarChar(500)
  movie_languages movie_languages[] 
}

model language_role {
  role_id         Int               @id @default(autoincrement())
  language_role   String?           @db.VarChar(20)
  movie_languages movie_languages[] 
}

model movie {
  movie_id           Int                  @id @default(autoincrement())
  title              String?              @db.VarChar(1000)
  budget             Int?
  homepage           String?              @db.VarChar(1000)
  overview           String?              @db.VarChar(1000)
  popularity         Decimal?             @db.Decimal(12, 6)
  release_date       DateTime?            @db.Date
  revenue            BigInt?
  runtime            Int?
  movie_status       String?              @db.VarChar(50)
  tagline            String?              @db.VarChar(1000)
  vote_average       Decimal?             @db.Decimal(4, 2)
  vote_count         Int?
  movie_cast         movie_cast[]         
  movie_company      movie_company[]      
  movie_crew         movie_crew[]         
  movie_genres       movie_genres[]       
  movie_keywords     movie_keywords[]     
  movie_languages    movie_languages[]    
  production_country production_country[] 
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_cast {
  movie_id       Int 
  person_id      Int
  character_name String? @db.VarChar(400)
  gender_id      Int
  cast_order     Int?
  gender         gender? @relation(fields: [gender_id], references: [gender_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mca_gender")
  movie          movie?  @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mca_movie")
  person         person? @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mca_per")

  @@index([gender_id], map: "fk_mca_gender")
  @@index([movie_id], map: "fk_mca_movie")
  @@index([person_id], map: "fk_mca_per")

  @@id([person_id, gender_id, movie_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_company {
  movie_id           Int
  company_id         Int
  production_company production_company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mc_comp")
  movie              movie?              @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mc_movie")

  @@index([company_id], map: "fk_mc_comp")
  @@index([movie_id], map: "fk_mc_movie")
  @@id([movie_id, company_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_crew {
  movie_id      Int
  person_id     Int
  department_id Int
  job           String?     @db.VarChar(200)
  department    department? @relation(fields: [department_id], references: [department_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mcr_dept")
  movie         movie?      @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mcr_movie")
  person        person?     @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mcr_per")

  @@index([department_id], map: "fk_mcr_dept")
  @@index([movie_id], map: "fk_mcr_movie")
  @@index([person_id], map: "fk_mcr_per")
  @@id([movie_id, person_id, department_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_genres {
  movie_id Int
  genre_id Int
  genre    genre? @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mg_genre")
  movie    movie? @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mg_movie")

  @@index([genre_id], map: "fk_mg_genre")
  @@index([movie_id], map: "fk_mg_movie")
  @@id([movie_id, genre_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_keywords {
  movie_id   Int
  keyword_id Int
  keyword    keyword? @relation(fields: [keyword_id], references: [keyword_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mk_keyword")
  movie      movie?   @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_mk_movie")

  @@index([keyword_id], map: "fk_mk_keyword")
  @@index([movie_id], map: "fk_mk_movie")
  @@id([movie_id, keyword_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model movie_languages {
  movie_id         Int
  language_id      Int
  language_role_id Int
  language         language?      @relation(fields: [language_id], references: [language_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_ml_lang")
  movie            movie?         @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_ml_movie")
  language_role    language_role? @relation(fields: [language_role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_ml_role")

  @@index([language_id], map: "fk_ml_lang")
  @@index([movie_id], map: "fk_ml_movie")
  @@index([language_role_id], map: "fk_ml_role")
  @@id([movie_id, language_id, language_role_id])
}

model person {
  person_id   Int          @id @default(autoincrement())
  person_name String?      @db.VarChar(500)
  movie_cast  movie_cast[] 
  movie_crew  movie_crew[] 
}

model production_company {
  company_id    Int             @id @default(autoincrement())
  company_name  String?         @db.VarChar(200)
  movie_company movie_company[] 
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model production_country {
  movie_id   Int
  country_id Int
  country    country? @relation(fields: [country_id], references: [country_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_pc_country")
  movie      movie?   @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: Cascade, map: "fk_pc_movie")

  @@index([country_id], map: "fk_pc_country")
  @@index([movie_id], map: "fk_pc_movie")
  @@id([movie_id, country_id])
}
